Repo'da bu readme'nin bulunduğu seviyede herhangi bir zamanda gösterilecek sistem demosunun kodunu tutalım. Yeri geldiğinde model training kodu falan eklemek gerekecek, onun klasör düzenlemesine zamanı gelince bakarız.

ToDo:
=====
1- 04_yurtAP_fingerprinting_nearestneighbour_firsttest/ klasöründeki deneyin kodunu ilgili klasöre eklemek
2- kamera dışındaki loc_x, loc_y kaydı yapma opsiyonlarıyla ilgili analiz
3- 20m kablolu kamera + AP ölçümleri ile bir {loc_x, loc_y, AP1RSS, AP2RSS, AP3RSS} otomatik ölçüm sistemi kurmak, onunla ilgili bölgede high-res ölçüm toplamak ve fingerprinting algoritmasını tekrarlamak
4- GUI üstünde gerçek zamanlı olarak pozisyon tahminini göstermek, GUI kodunu 05 experiment klasörüne eklemek






2024.03.13 Özet (Sinem hocayla paylaşılan):
===========================================
- Laptop'larındaki WiFi kartını monitor mode'a geçirip, wireshark / tshark + python ile etraftaki tüm WiFi paketlerinin RSS'ini gerçek zamanlı kaydedip işleyebilir hale geldiler.
- Bu sistem ile yurtlarındaki koridorda kurulum yapıp KU WiFi network access point'leri üstünden basit bir fingerprinting-based 2D indoor positioning çalışması yaptılar:

--> Yurt koridorunda 2 boyutlu düzlemde {loc_x, loc_y} noktalar belirleyip o noktalarda yakındaki KU access point'lerinden RSS ölçümlerini kaydediyorlar (3 access point varmış: RSS1, RSS2, RSS3 diyelim). Ekte paylaştıkları fotoğrafı iletiyorum (wp.jpg).

--> N tane lokasyonda bu ölçümü tekrarlayınca N x {loc_x, loc_y, RSS1, RSS2, RSS3} şeklinde bir database'leri oluyor

--> Test zamanında da aynı koridorda bir yerde durup bir (RSS1, RSS2, RSS3) ölçümü yapıp, database'te en yakında duran noktayı predict edip "buraya yakındayız" diyebiliyorlar (nearest neighbor algorithm diyebiliriz).

- Bu tabi çok yüksek accuracy vermiyor + dinamik kanal değişikliklerine karşı robustness'ı çok düşük, ama literatürdeki baseline metod bu olduğu için bununla başladılar. Bir adım ilerisi olarak bir de ekteki .png çizimdeki gibi bir 1/r^2 tipi modelleme yapıp onu ekleyecekler. Ana hedef olarak bu bilinen ve robust çalışmayan tekniklerden ziyade, learning tabanlı yeni bir metodu yapabileceklerini konuştuk.

- Şu anda bu yurt koridorunda manual yaptıkları "loc_x, loc_y ye git, RSS ölçümlerini excel'e kaydet" işlemini bir kamera + object detection modeli vasıtasıyla otomatik yapacak bir düzenek kurmakla uğraşıyorlar. Sonrasında bu kameradan gelen loc_x, loc_y değerlerini ground truth alıp, hem onu hem de RSS değerlerine bakarak tahmin yapan farklı algoritmaların sonuçlarını ekrana real-time basacak bir demo hazırlayacaklar.


*** Benim aklımdaki ana hedef: Literatürde dinamik kanal disturbance'larına robustness en büyük problemlerden biri gibi gözüküyor, benim semi/self-supervised bir metod ile buna bir çözüm getirilebileceği yönünde bir hipotezim var. Disturbance'lara örnekler: etrafta yürüyen insanlar, asansörler vs. gibi hareketli noise kaynakları, artan / azalan WiFi trafiği, ... . Bu tür disturbance'ları özellikle label edip bir datasete koyup onlar üstünden işlem yapmak çok yüklü bir efor, deneyenler var, fakat bu scale de etmiyor. Fakat bu disturbance'lar olup biterken toplanan unlabeled data üstünden (sadece RSS değerleri) çıkarımlar yapmak mümkün. 

Buna benzer bir problem son yıllarda audio processing'de yaşandı: Speech-to-text modelleri uzunca bir süre küçük labeled datasetler üstünden çalıştılar (speech içeren bir audio kayıt, ve o kaydın içinde konuşulan şeyin text dökümü). Fakat bu modeller o datasette bulunmayan case'lerde hep fail ettiler (e.g., aynı kelimenin farklı aksanlar ile söylenişi, arka plan sesleri, ...). Unlabeled devasa speech data'larını elde etmek çok daha kolay olunca (çünkü birinin oturup sesi dinleyip text karşılığını çıkarması gerekmiyor), sadece speech'e bakarak unsupervised train olan modeller bu eski sadece labeled data gören modelleri ciddi şekilde yendiler. Belki rastlamışsınızdır en ünlü örneklerinden biri OpenAI'ın "whisper" modeli.

WiFi tarafındaki problem de benzer olduğu için buraya o metodları uygulayabiliriz diye düşünüyorum (unlabeled data elde etmek çok kolay, laptop'u odaya koyup kaydet tuşuna basıp çıkabiliriz, ama disturbance'ları tek tek label etmeye kalksak altından kalkamayız).